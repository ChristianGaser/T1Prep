#!/usr/bin/env bash

# PURPOSE: Longitudinal wrapper to build an unbiased rigid mid-space template
#          across multiple T1 timepoints using the lightweight PyTorch utility
#          t1prep.rigid_ic. Optionally saves resampled images in template space.
#
# USAGE:
#   T1Prep_longitudinal --out /path/to/out [--device cpu|cuda] [--iterations 2]
#                       [--levels 3] [--save-resampled]
#                       T1_tp1.nii.gz T1_tp2.nii.gz [T1_tp3.nii.gz ...]
#
# NOTES:
# - This script focuses on the rigid inverse-consistent mid-space stage.
# - It does not (yet) orchestrate segmentation/softmap handling; you can pass
#   your preprocessed T1s directly. A future update can integrate soft maps.
# - The output directory will contain:
#   - rigid_template_T1.nii.gz: the mid-space template
#   - *_toTemplate_rigid.npz: per-timepoint rigid transforms
#   - optional *_inTemplate.nii.gz if --save-resampled is used

set -euo pipefail

script_dir=$(cd "$(dirname "$0")" && pwd)
root_dir="${script_dir}/.."

# Reuse helper functions if available
if [[ -f "${script_dir}/utils.sh" ]]; then
  # shellcheck disable=SC1090
  source "${script_dir}/utils.sh"
fi

python=${python:-python3}
outdir=""
device="cpu"
iterations=2
levels=3
save_resampled=0

usage() {
  cat <<EOF
Usage: $(basename "$0") --out DIR [options] T1_tp1.nii.gz T1_tp2.nii.gz [...]

Options:
  --python PATH          Python executable to use (default: ${python})
  --out DIR              Output directory (required)
  --device {cpu|cuda}    Device for PyTorch (default: cpu)
  --iterations N         Template refinement iterations (default: 2)
  --levels N             Pyramid levels (default: 3)
  --save-resampled       Also save per-timepoint volumes in template space
  -h, --help             Show this help and exit
EOF
}

if [[ $# -lt 1 ]]; then
  usage
  exit 1
fi

inputs=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --python)
      python="$2"; shift 2;;
    --out)
      outdir="$2"; shift 2;;
    --device)
      device="$2"; shift 2;;
    --iterations)
      iterations="$2"; shift 2;;
    --levels)
      levels="$2"; shift 2;;
    --save-resampled)
      save_resampled=1; shift;;
    -h|--help)
      usage; exit 0;;
    --) shift; break;;
    -*)
      echo "Unknown option: $1" >&2
      usage; exit 2;;
    *)
      inputs+=("$1"); shift;;
  esac
done

if [[ -z "${outdir}" ]]; then
  echo "Error: --out is required" >&2
  usage
  exit 2
fi

if [[ ${#inputs[@]} -lt 2 ]]; then
  echo "Error: Provide at least two T1 images" >&2
  usage
  exit 2
fi

# Basic checks
if command -v realpath >/dev/null 2>&1; then
  outdir=$(realpath -m "${outdir}")
fi
mkdir -p "${outdir}"

for f in "${inputs[@]}"; do
  if [[ ! -f "$f" ]]; then
    echo "Input not found: $f" >&2
    exit 3
  fi
done

# If helper exists, ensure Python is available
if declare -f check_python_cmd >/dev/null 2>&1; then
  check_python_cmd
fi

echo "[T1Prep_longitudinal] Running rigid inverse-consistent registration..."
cmd=("${python}" -m t1prep.rigid_ic --inputs)
for f in "${inputs[@]}"; do cmd+=("${f}"); done
cmd+=(--out-dir "${outdir}" --device "${device}" --iterations "${iterations}" --levels "${levels}")
if [[ ${save_resampled} -eq 1 ]]; then cmd+=(--save-resampled); fi

echo "[CMD] ${cmd[*]}"
"${cmd[@]}"

echo "[T1Prep_longitudinal] Done. Outputs in: ${outdir}"

exit 0
