#! /bin/bash

########################################################
# global parameters
########################################################
time=`date "+%Y%b%d_%H%M"`
MEM_LIMIT=0

# Text formatting
BOLD=$(tput bold)
UNDERLINE=$(tput smul)
NC=$(tput sgr0) # Reset all attributes

# Colors
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PINK=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)

########################################################
# run main
########################################################

main ()
{
  get_no_of_cpus
  parse_args "${@}"
  check_files
  if [ "$MEM_LIMIT" -gt 0 ]; then
    get_no_processes
  else
    get_no_of_cpus
  fi
  parallelize

  exit 0
}

########################################################
# check arguments and files
########################################################

parse_args () {
  local optname optarg
  count=0  # To track positional arguments (filenames)

  # Iterate through all arguments
  while [ $# -gt 0 ]; do
    optname="${1%%=*}"
    optarg="${2:-}"

    case "$1" in
        --mem-limit* | -m*)
            exit_if_empty "$optname" "$optarg"
            MEM_LIMIT="$optarg"
            shift
            ;;
        --processes* | -p*)
            exit_if_empty "$optname" "$optarg"
            NUMBER_OF_JOBS="$optarg"
            shift
            ;;
        --logdir* | -l*)
            exit_if_empty "$optname" "$optarg"
            LOGDIR="$optarg"
            shift
            ;;
        --command* | -c*)
            # Ensure that the option has an argument
            exit_if_empty "$optname" "$optarg"
            COMMAND="$optarg"
            shift  # Skip the next argument since it's the value for --command
            ;;
        --fg* | -f*)
            FG=1
            ;;
        --test* | -t*)
            TEST=1
            ;;
        -h | --help | -v | --version | -V)
            help
            exit 1
            ;;
        -*)
            echo "`basename $0`: ERROR: Unrecognized option \"$1\"" >&2
            #exit 1
            ;;
        *)
            # Treat anything not starting with `-` as a positional argument (filename)
            ARRAY[$count]="$1"
            ((count++))
            ;;
    esac

    shift  # Move to the next argument
  done
}

########################################################
# check arguments
########################################################

exit_if_empty ()
{
  local desc val

  desc="$1"
  shift
  val="$*"

  if [ -z "$val" ]; then
    echo ERROR: "${RED}No argument given with \"$desc\" command line argument!${NC}" >&2
    exit 1
  fi
}

########################################################
# check files
########################################################

check_files ()
{
  if [ -z "$COMMAND" ]; then
    echo "${RED}$FUNCNAME ERROR - no command defined.${NC}"
      help
    exit 1
  fi
  
  SIZE_OF_ARRAY="${#ARRAY[@]}"
  
  if [ "$SIZE_OF_ARRAY" -eq 0 ]; then
      echo '${RED}ERROR: No files given!${NC}' >&2
      help
      exit 1
  fi

  i=0
  while [ "$i" -lt "$SIZE_OF_ARRAY" ]; do
    if [ ! -f "${ARRAY[$i]}" ] && [ ! -d "${ARRAY[$i]}" ]; then
      echo "${RED}ERROR: File or directory ${ARRAY[$i]} not found${NC}"
      help
      exit 1
    fi
    ((i++))
  done

}

########################################################
# get # of cpus
########################################################
# modified code from
# PPSS, the Parallel Processing Shell Script
# 
# Copyright (c) 2009, Louwrentius
# All rights reserved.

get_no_of_cpus () {

  CPUINFO=/proc/cpuinfo
  ARCH=`uname`

  if [ -z "$NUMBER_OF_JOBS" ]; then
    if [ "$ARCH" == "Linux" ]; then
      NUMBER_OF_JOBS=`grep ^processor $CPUINFO | wc -l`
  
    elif [ "$ARCH" == "Darwin" ]; then
      NUMBER_OF_JOBS=`sysctl -a hw | grep -w "hw.logicalcpu" | awk '{ print $2 }'`
  
    elif [ "$ARCH" == "CYGWIN_NT" ] || [ "$ARCH" == "MSYS_NT" ] || [ "$ARCH" == "MINGW32_NT" ] || [ "$ARCH" == "MINGW64_NT" ]; then
      NUMBER_OF_JOBS=`wmic cpu get NumberOfLogicalProcessors | grep -v NumberOfLogicalProcessors`
  
    else
      NUMBER_OF_JOBS=`grep ^processor $CPUINFO | wc -l`
    fi
  
  fi  
}

########################################################
# get # of processes w.r.t. available memory
########################################################

get_no_processes () {

  ARCH=`uname`

  if [ "$ARCH" == "Linux" ]; then
    # Get total installed memory in MB
    mem_total=$(grep MemTotal /proc/meminfo | awk '{print $2}')

    # Convert KB to GB
    mem_gb=$(echo "$mem_total / 1024 / 1024" | bc)

  elif [ "$ARCH" == "Darwin" ]; then
    # Get total installed memory in bytes
    mem_total=$(sysctl hw.memsize | awk '{print $2}')

    # Convert bytes to GB
    mem_gb=$(echo "$mem_total / 1024 / 1024 / 1024" | bc)

  elif [ "$ARCH" == "CYGWIN_NT" ] || [ "$ARCH" == "MSYS_NT" ] || [ "$ARCH" == "MINGW32_NT" ] || [ "$ARCH" == "MINGW64_NT" ]; then
    # Get total installed memory in KB
    mem_total=$(wmic ComputerSystem get TotalPhysicalMemory | grep -Eo '[0-9]+')

    # Convert bytes to GB
    mem_gb=$(echo "$mem_total / 1024 / 1024 / 1024" | bc)
  else
    echo "${RED}System $ARCH not recognized${NC}"
    exit 1
  fi
    
  # Calculate number of processes (at least 1) and require 10GB memory for each process
  NUMBER_OF_JOBS=$(echo "if ($mem_gb < 10) 1 else $mem_gb / $MEM_LIMIT" | bc)
}

########################################################
# run parallelize
########################################################
 
parallelize ()
{
    
  local SIZE_OF_ARRAY="${#ARRAY[@]}"

  # If NUMBER_OF_JOBS is 0, execute commands serially
  if [ "$NUMBER_OF_JOBS" -lt 2 ]; then
      echo "Executing serially..."
      for file in "${ARRAY[@]}"; do
          eval "$COMMAND \"$file\""  # Use eval to handle complex commands
      done
      return
  fi

  local BLOCK=$((10000* $SIZE_OF_ARRAY / $NUMBER_OF_JOBS ))
  local i=0
  
  # Initialize logging
  if [ -z "${LOGDIR}" ]; then
    LOGDIR=$PWD
  fi
  local log=${LOGDIR}/parallelize_${HOSTNAME}_${time}.log

  # Process files in parallel
  while [ "$i" -lt "$SIZE_OF_ARRAY" ]; do
    local count=$((10000* $i / $BLOCK ))
    if [ -z "${ARG_LIST[$count]}" ]; then
      ARG_LIST[$count]="${ARRAY[$i]}"
    else
      ARG_LIST[$count]="${ARG_LIST[$count]} ${ARRAY[$i]}"
    fi
    ((i++))
  done

  if [ -z "${TEST}" ]; then
    echo "${GREEN}Check $log for logging information${NC}"
    echo > $log
    echo
  fi
  
  i=0
  while [ "$i" -lt "$NUMBER_OF_JOBS" ]; do
    if [ ! "${ARG_LIST[$i]}" == "" ]; then
      j=$(($i+1))
      echo job ${j}/"$NUMBER_OF_JOBS":
      echo $COMMAND ${ARG_LIST[$i]}
      if [ -z "${TEST}" ]; then
        if [ -n "${LOGDIR}" ]; then
          echo job ${j}/"$NUMBER_OF_JOBS": $COMMAND ${ARG_LIST[$i]} >> $log
          nohup bash -c "for k in ${ARG_LIST[$i]}; do $COMMAND \$k; done" >> $log 2>&1 &
        else
          nohup bash -c "for k in ${ARG_LIST[$i]}; do $COMMAND \$k; done" >> /tmp/nohup.log 2>&1 &
        fi
      fi
    fi
    ((i++))
  done
  
  # keep all processes in foreground
  if [ -n "${FG}" ]; then
      echo "Waiting for jobs to complete..."
      wait
  fi
}

########################################################
# help
########################################################

help ()
{
cat <<__EOM__

${BOLD}USAGE:${NC}
  parallelize [options] -c <STRING> [filename|filepattern]

${BOLD}OPTIONS:${NC}
  -p, --processes <NUMBER>  Specify the number of parallel jobs (default $NUMBER_OF_JOBS).
  -c, --command <STRING>    Command to be executed in parallel.
  -f, --fg.                 Keep all processes in foreground.
  -t, --test                Run in test mode: print the files to be processed without executing the command.
  -l, --logdir <DIR>        Directory to save the log file.
  -m, --mem-limit <INT>     Memory limit for each process in GB (default is $MEM_LIMIT GB).

${BOLD}DESCRIPTION:${NC}
  Execute commands in parallel across multiple files specified by filenames or a wildcard pattern. 
  Optionally, adjust the number of processes, memory limits, and logging preferences.

${BOLD}OUTPUT:${NC}
  If a log directory is specified, logs are saved in a file named 'parallelize_${HOSTNAME}_\${time}.log',
  incorporating the current date and time.

${BOLD}EXAMPLES:${NC}
  ${BLUE}parallelize -c "niismooth -v -fwhm 8" sTRIO*.nii${NC}
    Parallelizes the 'niismooth' command with an 8mm FWHM, applied to all files matching 'sTRIO*.nii', displaying verbose output.

  ${BLUE}parallelize -c "gunzip" *.zip${NC}
    Parallelizes unzipping of all .zip files in the current directory.

  ${BLUE}parallelize -m 10 -c "T1prep --no-surf" sTRIO*.nii${NC}
    Parallelizes 'T1prep' without surface estimation, setting a 10GB RAM limit per process.

  ${BLUE}T1Prep.sh --out-dir test_folder --no-surf --hemisphere sTRIO*.nii
  parallelize -p 8 -c "T1prep --out-dir test_folder --no-seg" sTRIO*.nii${NC}
    First, runs 'T1prep' with settings to skip the estimation of segmentations, then
    parallelizes execution for better performance across 8 processors.

${BOLD}Author:${NC}
  Christian Gaser (christian.gaser@uni-jena.de)

__EOM__
}

########################################################
# call main program
########################################################

main ${1+"$@"}

